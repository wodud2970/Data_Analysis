이번 시간에는 저번시간의 약간의 뭐 계속 연장 선이죠

컴포넌트에 대해서 배웠잖아요

컴포넌트는 뭐였냐면 이런 UI를 잘게 잘게 쪼갠 이런 하나하나

요소, 요소 하나하나

구분해서 파일을 따로 관리라고

외부에서 그 파일을 가져와서 사용하고

UI를 잘게 쪼개는 일을 컴포넌트화 하라고 했습니다

그리고 실제적으로 컴포넌트는 뭐였냐면

여러분이 계속 코딩을 하고

계셨던 함수 자체가 컴포넌트였어요 

그 함수 자체라 하면, 뭐 이겁니다

여러분들이 전체를 감싸는 함수가 딱 하나밖에 없잖아요

여기 function App, 이게 컴포넌트였던 거 였어요

그래서 우리가 저번시간에 네모네모 영역을 컴포넌트화해서 

외부에서 가져와서 사용했습니다

이제는 뭘 할 거냐면 속성이란 걸 아니까

상태라는 것을 배울 거에요

상태는 뭐냐면 이 컴포넌트 안에서는

이 데이터를 관리 할 수가 있는데

관리하는 방법이 정해져 있어요

관리하는 방법이 딱 이 state

그리고 useState이 두가지를 사용해서 관리

해야 된다는 게 정해져 있습니다

그냥 자 그래서 우리는 이 정해져 있는 사용 방식을

컴포넌트에 적용을 해서 바로 한번 확인해 볼 텐데요

일단은 코드스니펫을 바로 붙여

넣으신 다음에 확인해 보도록 하겠습니다

코드스니펫을 가지고

오신 다음에 App.js 에다가 이렇게 붙여넣어 주세요

붙여 넣기 해주시면 달라진 부분이 여기 상단이에요 상단 

이렇게 상단이고 위에서부터 한번 보시겠습니다

위에서부터 보면 우리가 이제

리액트에서 컴포넌트화, 이 함수

이 함수 안에서 데이터를 관리하고 싶다

관리하고 싶다 데이터를 관리하고

그리고 변경하고 저장하고

이게 다 사실 관리죠 이 관리를 하고 싶다

라고 했을 때는 리액트에서

useState라는 걸 꺼내야 해요 이걸 꺼낼 때

이렇게 중괄호로 이렇게 꺼내야 합니다

이거 이 점에 유의하시고

useState라는걸 중괄호로 꺼내야 합니다

useState 그리고 실제 이걸 어떻게 사용하냐

뭐 이런 식으로 사용합니다. 제가 이렇게 써놨지만

다시 한번 쓰면서 설명을 드리자면 const state

자 그럼 이게 뭘까요 useState라는 게 

이거 딱 봐도 지금 함수같죠 그죠? 이렇게 소괄호 있으니까

함수인데

값을 이렇게 뭔가 뱉죠 뱉는데 

이거 이거 뭐랑 비슷하죠?

비구조할당 바로 할당받고

변수가 되는 거잖아 이 자체가 우리 자바스크립트 때 

그래서 그게 다른 거에요 우리가 

여기가 해서 useState에서 state값과 setState 값을 이렇게 내보내니까

우리 여기에다 딱 바로 뱉는 거에요 이런 식으로

그러면 이 state는 뭐냐

이제 여러분들이 컴포넌트 안에서 사용할

관리할 데이터들은 다 이 state

변수안에 다 들어있고요

이 setState라는 거는

결과적으로 함수인데 여기서 이제 함수를 내보낸 거에요

함수를 내보낸 걸 setState라는 변수가 함수를 받아서

이 setState가 함수 일을 하는 거죠

이것도 한번 추후에 어떻게 작용이 되는지 실제로 눈으로 볼 거에요

그래서 useState 함수는 이 컴포넌트 안에서 사용할

데이터를 상태를 이 state라는 곳에다가 이렇게 뱉어주고

그다음에 setState에는 이

state에 담여 있는 상태값을

변경할 때는 이 함수를 써라, 라고 해서 이 함수까지 전달해 줍니다

이 앞에 있는 이름들은요 변경 하셔도 돼요

이건 여러분들이 정말 말 그대로 자체적으로 변수니까

변수명은 여러분들이 마음대로 하셔도 됩니다

어차피 변수명은 바뀌어도

이 useState에서는 컴포넌트에서 사용할 이 상태값, 데이터와

그 상태값을 변경할 함수 이 두가지를 뱉고 있기 때문에

받는 변수명은 달라도 돼요

그리고 여기가 중요해요 여기 지금

제가 이거 한번 다시 지우겠습니다

useState 함수에는 어떤 값을 넘겼어요

이게 뭐냐면 값이 뭐죠? 리스트입니다

리스트 그죠 지금 리스트를 여기 함수에다가

넘겼어요 이건 뭐냐면 이 State있죠 이 State가

뭐냐고 했냐면 이 컴포넌트 안에서 사용할 데이터가 담겨 있는 곳이라고

그랬잖아요 상태값 여기

컴포넌트에서 관리할 상태값이 여기 들어있어요

변수도 처음에 초기화 할 수 있잖아요 예컨데

변수도 const a = 1 해서 이거 뭐죠

이래서 a 라는 변수는 처음부터 1이라는 값을 갖고 태어난거죠

그거랑 똑같아요

여기에서 useState에다가

어떤 값을 이렇게 보내 주면 보내 주면

이 state는 처음부터 이 값을 갖고 태어납니다

그러면은 이 state 안에는 이런 값들이 들어 있기 때문에

우리는 가서 사용할 수가 있는 거에요

지금은 비단 우리가 리스트 형태의 값을 넣어 놨지만

뭐 True, 참 거짓도 보내줄 수 있고

숫자도 받을 수 있고 문자도 보낼 수가 있습니다 아시겠죠

그래서 이 여기에다가 이 useState함수에다가 

전달하는 이 값은 컴포넌트에서

사용할 선택값들, 초기값이다, 라고 아시면 될 것 같아요

이 여기 안에 들어있는 값을 변경하려면

어떻게 해야 된다?

setState 이 뒤쪽에 있는

함수를 사용해서 변경하셔야 돼요

변경하는 거는 나중에 같이 한번 다시 보시고

자 제가 여기에다가 콘솔로그를 찍었어요 

여러분 네

그래서 이 콘솔로그는

우리가 자바스크립트 때

변수안에 어떤 값이 들어있는지 찍으려고 썼던 

그런 함수였잖아요, 그런데 여기에서도 쓸 수가 있어요

이 콘솔로그를 이렇게 찍고

State 안에 뭐가 들어 있느냐

보면은 밑에 터미널에도 그렇지만

우리가 여기서 이 화면 있죠

이게 제가 초창기에 뭐라고

말씀드렸었냐면, 앱의 로그, 상태를 볼 수 있다고 했어요

바로 여기서 지금 확인이 가능한 겁니다

이제 여기서 앱에서 콘솔로그 찍는 것들은 다

여기서 확인할 수가 있어요

그래서 여러분들이 앱을 개발할 때

이 값이 지금 제대로 들어갔나?

그리고 이 값에는 뭐가 들어가 있지?

이런 것들을 확인할 때

콘솔로그를 찍어보시면 이렇게 여러분들

화면에서 확인할 수가 있습니다

상태 초기값, ID-0 타이틀제목, 이거죠

그래서 약간 이런 거예요

그래서 이 컴포넌트, 이 함수를 하나 

만든다는 것

그리고 이 함수가 실행이 된다는 거는 사실

뭐 그냥 간단하게 말씀드리면

위에서부터 아래로 흐르는 거

여기서 위에서부터 아래에서, 위에서부터 아래로 흐르기 때문에

여기 상태값 만들었죠

초기화 되었죠? State에 값이 들어갔죠

그다음에 이게 콘솔로그에 상태값을 찍어 봤죠

그렇기 때문에 이게 우리는 위에서부터 아래로 실행이 되고

결과적으로 마지막에 이게 화면이 그려진다

라는 걸 알 수가 있습니다

그래서 콘솔로그도 우리가 찍어서 볼 수 있다

이게 여기서 쓸 수 있던 이유는 뭐냐면

결국 이게 다 지금 전부 다 자바스크립트이기 때문에 

가능한 거예요

아시겠죠 

그래서 이렇게 상태값을 우리가 찍어 볼 수도 있습니다

그래서 혹시 제가 쭉 설명을 드렸지만

한 번에 다 이해가 안 될 수도 있어요

컴포넌트에서 관리할 수 있으려면

데이터를 관리하려면 항상 리액트에서

제공해주는 useState라는 걸 써야 된다

useState라는 거는 함수인대

이 컴포넌트 안에서 사용할 수 있는 상태값을 초기화

해 주고 변경할 수 있는 함수를 제공해준다

만 아시면 될 것 같고 시간 두시고

한번 주석도 천천히 보시고

제가 했던 내용에 대해서 또 곰곰히 곱씹어 보시기 바랍니다

제가 순서도 이렇게 알려드렸구요 

그래서 컴포넌트는 위에서부터 아래로 실행된다

우리가 이제 상태값을 상태값 관리 useState에 대해서 배웠으니까

그럼 실습을 또 해 볼 필요가 있을 것 같아요

자 우리가 이제 실습할 거는 뭐냐면요

그 다양한 문제들로 우리가 아까

이전에는 지금 만든 거는 다 지금 네모네모 영역에 똑같은 문제들만

이렇게 쭉 보여 줘요 그림들이, 그죠?

그런데 이제는 다양한 문제들로

버튼들을 지금 구성을 할 거고요

그리고 그 다양한 문제들을

컴포넌트에서 관리를 할 거예요

어떻게 하나 보면은

일단은 먼저 다양한 문제들 제가 준비해 놨습니다

여러 가지 재밌는 심리테스트 문제들 다 준비해 놨어요

그래서 여러분들은 이 코드스니펫 2번을 이렇게 복사를 해 주세요

복사하셔서 여기에다가 또 하나 만드세요

이게 new file해서 data.json 만드시고

여기에 복사 붙여 넣기를 해 주시면 됩니다

json이 뭐라 그랬죠

딕셔너리와 리스트의 복합구조, 이게 전부입니다

그래서 이렇게 만들어 주셔서 이 문제

데이터를 이렇게 딱 더 주시고

그 다음에 이 문제 데이터와 data.json이 준비됐으면

또 문제 파일을 가져와서 적용을 해야 되겠죠

그래서 App.js 코드스니펫 3번을 복사

붙여넣기를 해주세요 App.js에다가 넣어 주세요 

그러면 우리가 지금 여기에서 뭘 했냐면요, 정말 별거 안 했어요

지금 제가 제공해드린 심리테스트 문제를 가지고

데이터 제이슨파일을 만들었죠 그리고 거기다가 문제를 넣었죠

그리고 App.js에서는 그 데이터를 갖고 왔어요

App.js랑 data.json이랑

똑같은 폴더 레벨에 있으니까 가져와서 사용하는 겁니다

그래서 이 데이터가 어디에 들어왔냐

데이터, 데이터라는 것은

지금 제이슨파일 전체를 뜻하잖아요

거기에서 지금 내가 뭘 하냐면

data.question이라는 걸 했어요

그러면 이걸 가리키는 거겠죠

이걸 가르킨다는 거는 곧 딕셔너리에서 key를

치면 뭐가 나오죠? 

value가 나오잖아요 그죠 리스트에 있는 value가 나오는 거에요

그럼 여기에 있는 문제들이 이 상태값에 

담겨서 초기화되고

그건 여기 state에 담기게 되는 거겠죠

그래서 저장을 해 보면은 지금 여기 스크롤이 막 올라가죠

네 왜냐면 이 state지금 우리 선택값 뭐 들어 있나

이거 보려고 이렇게 콘솔로그 찍어 놓았잖아요

근데 여기는 뭐가 들어 있을까요? 

제가 드린 문제가 이렇게 있겠죠

그래서 쪽 보시면 뭐 소름돋게 정확한 심리 테스트 4, 해 가지고

제가 좀 많이 넣어 놨어요 열심히 찾았습니다

그거를 이제 여러분들이 앱으로 가지고 온 거에요

그 데이터를 아시겠죠 그래서

이렇게 해서 데이터를 쉽게 또 App.js로

가져올 수도 있어요 전부 다

다 우리가 배운 건데

그냥 import, export를 통해서

그 딕셔너리 키값 접근을 통해서 가져 온 겁니다

자 그 다음에 우리가 뭘 할 거냐면

그 다음에는 지금

우리가 App.js에서 너무 멋없게 버튼 카드를 계속

복사 붙여 넣기 했어요

그죠 복사 붙여넣기 해서 쭉 이렇게 준비해놨습니다

이거를 우리는 이제

조금 더 뭔가 우리는 개발자니까

이제 App.js 상태까지 우리가 저장을 해 놓았고

그 상태값을 실제로 여기에서 자바스크립트를 쓰는 거에요 

이 자바스크립트를

여러분들 앱 만들 때 더 적극적으로 활용하고

반복하고 뭐 연습하는 거는 다음 주 차수 때 

더 본격적으로 공부할거지만

가장 기본적으로 우리가 오늘을 위해서 기다린

맵 함수를 한번 써 보려고 합니다

자 일단 맵 함수를 쓸 건데

맵 함수는 리스트 에서 쓰는 반복문이었죠

1줄짜리 반복문이었어요 지금 상태값에는 뭐가 들어 있죠?

그 문제가 리스트형태로 들어있잖아요 그죠

그러면 State를 쓰면 되겠네 State를.. 그래서 어떻게 쓰냐

이 jsx 문법 안에서는 자바스크립트를 쓸 때

항상 중괄호 안에서 써야 돼요

그래서 이거에 대해서는 정확하게 잘 몰라도 됩니다 왜냐하면 

3주차 때에도 더 할 거고요

그리고 이 jsx 문법 안에서 자바스크립트를 쓰려면

중괄호를 쓰고 그 안에다가 써야 된다

이게 어려운 건 아니잖아요

jsx 문법 안에서는 뭐

이렇게 써야 된다, 라고 정해져 있는 거니까

우린 여기서 State.map을 쓰고 map은 이렇게 썼죠

우리가 question이니까 이렇게 쓰고 이렇게 쓰는 겁니다

그래서 State에는 이제 리스트가 들어가 있으니깐요

리스트에서 어 반복문을 돌리고싶다

한줄짜리로, 그럼 우리가 맵을 썼으니까 이 State하고

그다음에 맵, 이렇게 쓰신 다음에

여기 안에는 이제 하나씩 하나씩 문자

하나씩 다 여기 떨어지겠죠

그러면 우리가 이제 받아서 사용하는 건데

그럼 이따가 하고

그다음에 이제 맵함수가

이제 리턴해서 결국 뭔가 반복문을 돌면서

값을 뱉을 수 있잖아요

근데 우리가 여기서 뭘 뱉어야 하냐면

화면을 그리는 애를 이제 뱉어야 되겠죠

결과적으로 지금 여기 jsx 문법 전체는 화면를

그리는 영역이니까, 여기서 뭘 이렇게 반환을 하냐

여러분들이 컴포넌트화 시켰던 그 버튼

카드 영역, 이 하나를 반환시켜 주면 돼요

자 그렇게 됐을 때 어떻게 되냐

정말 많은 문제들 때문에 이 네모네모영역이

엄청 많이 생겨요

제가 문제를 정말 열심히 모았거든요

그래서 지금은 이렇게 해 가지고

State에 문제를 다 몽땅 다 받고

그게 엄청 많잖아요 2,30개 됩니다 이 개수만큼

그냥 버튼 카드를 반복문 시켜서 돌린 것 뿐이에요

그렇기 때문에 이 이미지 라든지 여기

네모네모영역 이름이라던지 아직은 다 똑같죠

뭐 이렇게 해 가지고 우리가 상태에다가

어 지금 컴포넌트 안에서 관리

하고 싶은 데이터는 상태에다가 넣을 수 있었어요

그리고 아직은 뭐 다루진 않았지만

이 newsState에서 제공해주는

State 상태값을 변경해주는

함수를 통해서 상태값을 나중에 변경할 수도 있고

이거 나중에 같이 다룰 거고요

다시 같이 해서 지금은 문제들이 상태값에

몽땅 다 담겨 있는 상태입니다

자 그렇다면 이제 이따가 우리가 버튼 카드에다가 

이제 정말 문제 데이터를 넘겨 줄 거예요

컴포넌트 쪼갠 거, 거기다가 문제를 정말 넘겨 줄 거에요

그러면은 어떤 일이 벌어지냐?

지금은 똑같은 영역이 지금 다 그냥, 

복사 붙여넣기 해서 나오는 형태지만

갖가지가 다 이미지도 다르고 제목도 다를 거예요

왜냐면 이제 문제

데이터들마다 이 영역을 다 다르게

정보를 구성 할 거니까

이러기 위해서 반복문을 돌렸지만

갖가지 떨어져나오는 데이터를 이 버튼 카드, 이 컴포넌트에다

남기기 위해서 사용하는 문법이 있어요

리액트의 기초 문법이 있습니다 그게 바로 속성, Props입니다

이거는 이제 또 다음 시간에

바로 또 연달아서 배우도록 하겠습니다!