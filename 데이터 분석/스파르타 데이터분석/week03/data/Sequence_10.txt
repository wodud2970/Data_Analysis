여기까지 해 가지고

우리는 이제 화면을 어느 정도 그릴 수가 있어요

어느 정도가 아니라요

여러분들이 원하는 그런 화면은 거의 다 만들 수 있을 거라고

저는 자신합니다

왜냐면은 지금 일단 기본적으로

우리가 배운 것들이 기본적인 약간 영역을 갖추고

거기에 옷을 입히는 거였잖아요

제가 알려드린 게

거의 자주 사용하는 그런 태그들이었는데

혹시나 여러분들이 또 필요하거나

어 이거는 어떻게 구현하지? 이런 생각이 드시면 공식 문서가서

막 이렇게 찾아보시면 다 있기 때문에

이런 걸로 지금 계속 우리가 두 번

예습을 통해 가지고 예제를 통해서 연습을 했잖아요 그죠? 

그렇기 때문에 이제는 화면은 이제

그릴 수가 있는 거에요 여러분들이

이제 자 그다음에 오늘

이제 마지막에 이제 좀 차지하게 될 내용은

뭐냐면요 이 리액트 네이티브라는 앱이, 리액트라는 라이브러리



이제 라이브러리 뭔지 알죠? 이게 자바스크립트 도구에요

이제 자바스크립트 도구로 앱을 만드는 건데

그 도구 이름이 리액트였단 말이죠

그래서 리액트 네이티브 라는 앱 기술은

리액트의 기술을 따라 가요 그래서 리액트라는 기술이 필요합니다

어느 정도 알고 있어야지

리액트 네이티브 앱을 만들 수 있어요

리액트라는 도구의 기술도 꽤나 쉬운 게 아닙니다

근데 이제 제가 봤을 때

앱 만들 때 딱 이제 한

이 4가지만 알면 될 거 같은 생각이 들었고

실제로 경험도 많이 해 봤어요

그래서 정말 필요한 것들

딱 4가지만 추려서 배우면

여러분들이 만들고자 하는 앞으로 만들고자 하는 앱들이나

우리가 이 수업을 통해서 만드는

두 가지 앱 모두 다 커버가 가능합니다

그래서 이제 우리는 리액트에 대해서 앱을 만들기 위한

필수지식 4가지를 이제 배워보도록 하겠습니다

일단은 리액트라는 그런 기술 필수 기초 지식은

총 네 가지가 이제 필요한데요

대표적으로 이름만 일단 한번 쭉 들어 보세요

무엇인지는 지금 잘 모르셔도 됩니다

첫 번째는 컴포넌트라는 거예요

화면의 일부분 부분부분을

이제 컴포넌트 라는 개념으로 생각을 할 필요가 있어요

이거는 어려운 게 아니라

여러분들 지금 만들던 거에요, 이게 뭐였는지를

이제 뒤에서 제가 알려 드리도록 하겠습니다

그 다음에 상태라는 건데요

상태라는 거는 이제

컴포넌트 이제 곧 배우게 될 컴포넌트 안에서 데이터를 뜻해요

데이터라는 거는 되게 다양한데

정말 우리가 배웠던 자료형 숫자 문자

여러 가지 데이터들을 가리키기도 하고

그리고 이제 뭔가 컴포넌트 안에서

뭔가 유지하고 싶은 것도 있어요

예를 들어서 어떤 사람이 로그인을 한다고 쳤을 때

로그인 정보가 앱에 남아 있어야 되잖아요

그런 여러가지 데이터들 그런 데이터들을

이제 리액트네이티브에서는 상태관리

데이터 관리를 상태관리, 또는 상태라고 말합니다

그리고 이제 컴포넌트들이 이제 여러 개가 있을 텐데

여러분들 컴포넌트를 여러 개 만들 거에요

이게 뭔지는 바로 뒤에서 말씀드리니까

너무 걱정하지 마시고

컴포넌트에서 컴포넌트로 다른 컴포넌트로

이제 데이터를 넘길 때는 이 속성, Props라는 개념을 이용해서

데이터를 넘겨요 이 데이터는 뭐라고 했죠? 상태라고 했잖아요

이런 상태나 데이터 같은 것들

이런 것들을 Props라는 개념으로 전달을 시킵니다

그리고 이제 useEffect는

이제 화면이 컴포넌트라는 화면이 처음 딱 그려졌을 때

가장 먼저 실행되는 함수들이 있는 곳이에요 여기까지만

이렇게 간단하게 여기까지만

지금은 당연히 뭔지 모르셔도 됩니다

그냥 하나하나 다 자세히 다룰 거니까 

그래서 전체적인

그래서 리액트로 만든 프로젝트의 모습이 이래요

하나의 컴포넌트에서 이제 파생되면서

컴포넌트가 존재하는 그런 모습인데

그리고 데이터를 전달할 때도 props라는 걸 통해서 전달한다 했죠 

그리고 컴포넌트 안에서는 상태로 데이터를 관리한다

전체적인 모습은 이런데 지금은 당연히 무슨 말인지 잘 모르시겠죠

지금 되게 러프하게 한번 알려 드린 것 뿐이에요

우리가 4개의 필수 지식을

다 배운 다음에 이 그림을 다시 한번 봐 주시길 바라겠습니다

이게 어떠한 의미를 갖고 있는 그림인지 한 번에 아실 거에요 

그래서 이제 첫 번째로 컴포넌트라는 것 부터

이제 한번 배워 보도록 하겠습니다. 이제 컴포넌트라는 거는요

쉽게 말해서 여러분들이 만든 화면 있죠

지금 바로 밑에 제가 화면

방금 전에 같이 만든 화면을 넣어 놨는데 이 화면을 작게

쪼갤 거예요

예를 들어서 카테고리 버튼 하나를 만들었죠 우리가

그 버튼 하나도 컴포넌트라고 하고

이 네모칸 영역도 컴포넌트라고 하고

V 스크롤 리스트 라고 해서 이 영역들 있죠

전체 V 스크롤이라고 제가 이름을 명명했었잖아요 

이 전체 카드 그룹

컴포넌트 전체를 또 컴포넌트라고도 할 수 있고

UI를 여러분 마음대로 쪼개면 쪼갤 수록

그거다 다 그냥 컴포넌트가 되는 거에요

약간 개념적인 이름이죠

그럼 실제 컴포넌트에 실체, 이제 컴포넌트가 뭐냐

여러분들이 다 지금 만든 겁니다

일단 컴포넌트는 화면의 모든 일 부분들을 다 컴포넌트라고 했죠

그리고 실제 컴포넌트는 어떤 모습을 갖추고 있냐면

App.js의 큰 App 함수 네 App 함수 무엇이죠?

지금 다시 위로, 우리가 만들어 놓았던 코드로 가보면

엑스포트 뭐 익스포트 디폴트

function에서 App, 

항상 우리 이거 이렇게 만들고 시작했잖아요 그렇죠?

근데 이거는 제가 뭐라고 말씀드렸나면 화면을

그리기 위해서 화면을 그리기 위해서

이거를 내보내야지 화면이 그려진다

라고만 두루뭉실하게 말하고 넘어가는데

사실 이 App 함수를

우리는 컴포넌트라고 부를 수 있는 거에요

컴포넌트가 뭐라그랬냐면

화면에 일부분 요소요소를 컴포넌트라고 했는데

얘가 결론적으로요 이 함수

이 전체 App 함수는 컴포넌트를 뜻하는 거 였어요

그러면 지금 앱 컴포넌트는 뭘까요

지금 이 화면에서? 이 전체가 그냥 일단은 지금

컴포넌트인 거에요 왜냐하면 우리

지금 컴포넌트 쪼갠 게 없으니까

그래서 이 전체 앱을 우리는 앱 컴포넌트라고 부를 수가 있습니다

아시겠죠? 그래서 컴포넌트라는 것의 개념적인 이

실체는 함수였다

우리가 항상 이 개발을 할때

함수 export default에서 화면에 내보내는 그런 부분

그런 함수 전체를 컴포넌트 라고 부를 수 있는 겁니다

그리고 개념적인 측면에서는 이 요소요소

하나하나가 다 컴포넌트였습니다 아시겠죠

페이스북은 수만가지의 컴포넌트로

이루어져 있는 사이트를 운영하고 있다고 해요

왜냐 리액트는 페이스북에서 만들었다고 했죠?

리액트 네이티브도 그렇고 

그러니까 리액트 사이트는 당연히, 당연히 페이스북이 리액트를 썼으니까

컴포넌트 개념이 입혀져 있겠죠

그래서 정말 잘게 잘게 다 쪼개 가지고

사이트를 운영한다고 합니다

이렇게 컴포넌트 개념을 도입해서

UI를 잘게 잘게 쪼개면 뭐가 좋을까요?

뭐가 좋냐면

여러분들이 만약에 이 카드 그룹 중에서 컴포넌트 그룹 하나 있죠

버튼. 이거를 만약에 다른 페이지 그 여러분들

이런 페이지를 여러 개 만들 건데

이거를 고대로 다른 곳에서 쓸 때

컴포넌트화를 시키면 되게 편리합니다

왜냐 코드를 그냥 가져와서

그냥 거기서 쓰면 되는 거니까

그냥 다른 페이지에서 복사

붙여넣기해서 그 컴포넌트를 가져다가 그냥 쓰면 돼요

근데 쓸 때도 그냥 그 코드

전체 다 가지고 오는 게 아니라

그거를 약간 태그 형식으로 이렇게 가져와서

쓰게 됩니다

정확히 그려지지 않죠? 이거를 한번

우리가 실습을 한번 해 볼 거에요

저랑 똑같이 이 폴더에다가

Components 폴더라는 걸 하나 만들어 주세요

어떻게 만드냐면 이 VS 코드를 다시 갖고 와가지고

왼쪽에 잡혀있던 부분을 다시 열어서

바닥에 여기 비어 있는 공간 있죠?

여기다가 우측 클릭을 하시면 뉴폴더 이렇게 나옵니다

이렇게 해서 Components 이렇게 해서 폴더를 하나

만들어줘요 여기는

컴포넌트들이 이렇게 존재하기 될 거에요 앞으로

그리고 여기는 뭘 만드냐면

버튼 카드.. 카드라는 자바스크립트 파일이지만 곧

이거는 이제 버튼이라는 이 네모네모

영역의 버튼이 이제 여기 존재하게 될 거에요

컴퍼넌트화 시킬 거니까 아시겠죠? 하여튼 간에 만들어 보세요

그 다음에 제가 코드를 준비해 놓았습니다

그렇지만 이 코드는 여러분들이랑 같이 만들었던 코드에요, 한 번 보시면

코드스니펫을 복사해서 버튼 카드에다 붙여넣어 주세요

이거 익숙한 네모네모 영역에 써져 있잖아요 그죠? 아까 전에 우리가 

App.js에서 만들었던 이 부분이에요

이 부분만 발췌해 가지고 이 버튼 카드에 넣어 놓았어요

그리고 함수를 만들 때 

어떻게 했는지 또 한번 자세히 보세요

어 이거 이제 여러분들 아시죠

arrow function, 화살표 함수에요

그러니까 어차피 이 컴포넌트 App.js도 함수였고

결국에 함수를 컴포넌트화해서 내보내는 거니까 arrow function을 해도 되겠죠? 

그러니까 arrow function을 한 다음에 함수를 이렇게 하나 만들고

맨 밑에서 익스포트 디폴트

이렇게 버튼 카드 이름만, 함수

이름만 적어서 내보낼 수도 있습니다

그래서 사용 방법은 뭐 각양각색이지만

이렇게도 많이 사용해요

함수이름 앞에다가 바로 익스포트

디폴트를 붙여서 내보낼 준비를 할 수도 있고

그다음에 arrow function을 만든 다음에

이 이름을 옆에 달아 가지고 내보낼 수도 있고

여러분들이 원하시는 대로 내보내기를 사용하시면 됩니다

그래서 이렇게 버튼 카드 컴포넌트를 하나 만들었고요

자 그다음 우리가 App.js에 있는 코드 일부분을

컴포넌트화 했으니까 App.js

에서 그 부분을 빼야 하겠죠

어디냐면 밑에 부분 이렇게 얘가 뻬야 해요

근데 일단은 제가 마련한 코드스니펫

2번 App.js 복사 붙여넣기해서 App.js 여기에다

이렇게 넣어 주세요 이렇게

복사해서 붙여 넣어 주세요 그럼 화면은 어떻게 되었나요

화면은 변함이 없죠

당연히 왜냐하면 우리는 원래 있었던 코드를

그냥 이렇게 한 부분 떼어 내서

다른 코드 파일에서 이제 관리를 하는 거예요

그것뿐입니다 달라진 건 없지만

컴포넌트화 해서 쪼개서 관리를 하게 된 거예요

그럼 이제 컴포넌트 했던 이 버튼 카드

어떻게 가져왔냐 임포트해서 가져 왔어요

그래서 이제 여기서부터 우리가 그 실습을 할 수 있는 거야

예전에 1주차 때 export, import는

제가 실습할 수 없다고 했잖아요

왜냐하면 그때는 자바스크립트

파일을 분리해서 뭔가 연습할 수가 없었어요

상황이, 근데 이제는 이거를 분리해 가지고

가지고 올 수 있으니까

임포트 익스포트를 연습하는 거에요

버튼 카드 파일에 보시면

export default에서

버튼 카드라는 함수를 내 보냈잖아요

그죠? 내보낸 걸 App.js에서 가져와서 사용해야 되는데

어떻게 헸냐면 그냥 얘, 지금 이거 뭐죠? 경로 갔잖아요

컴포넌트 폴더에서 버튼 카드를 가져온 거예요 이 ./

는 App.js 파일이랑

동일한 레벨의 폴더가 이렇게 있잖아요

그죠 그래서 ./는 동일한 폴더를 가리키고

그 안에 있는 버튼 카드를 지목한 겁니다

거기에 있는 버튼 카드 함수를 내보냈으니까

export를 통해 가져온 거고

실제 사용할 때는 이런 식으로 사용합니다

이거 뭐랑 비슷하죠

이거는 여러분들이 되게 자주 사용하셨던 태그 문법이랑 똑같잖아요

그죠

그러니까 컴포넌트화 해서 불러와서 사용한다는 거는

여러분들이 여러분들만의 파일 이름으로 태그를 하나

생성해서 사용하는 거랑 똑같은 거예요 아시겠죠

그러기 때문에 여러분들이 뭔가 태그를 만들 때

이러면 이러면 똑같은 거 겹치면 안 되겠죠

근데 뭐가 있는지 어떻게 다 아냐

그냥 만들어 봤다가 에러가 나요

그러면은 이러면 쓰면 안 되겠네? 라는 걸 알게 되는 거죠

그 이름은 안 쓰면 되는 거예요

그래서 다 알 필요도 없고

에러도 너무.. 아 에러났다ㅜㅜ

이렇게 하지 말고

에러는 이제 배포하기 전에 겪는 에러들은 다

반가운 에러에요 그 전에 다 에러를 통해서

이제 여러분들도 배우게 되시는 거고

그 사전에 고칠 수가 있는 거니까

그래서 여러분들이 이제 버튼 카드를 컴포넌트 화해서

이런 식으로 가져 올 수가 있습니다

근데 이런 식으로 가져와서 쓸 수 있어요

이 버튼 카드는 이 부분은 여기가 해당이 되는 거죠

그래서 이 버튼 카드 하나는 이거 하나인데

우리가 우리가 지금

버튼 카드라는 컴포넌트화 시켜서 가져와서 사용했다

아시겠죠 

그래서 컴퍼넌트화는 이런 식으로 시킬 수가 있습니다

그래서 앞으로 여러분들이 이제 리액트네이티브로 앱을 우리랑

저랑 같이 이렇게 만들어가다 보면 파일들만 이렇게 많이 쪼갤 거예요

계속 컴포넌트화하는 연습도 많이 할 거고요

그래서 따로 외부에서 관리해서

잘 이것저것해서 사용하는 거를 많이 연습할 테니까

지금은 컴포넌트화는 UI를 잘게 쪼개서 관리하는 거다

그리고 컴포넌트는 실제적으로 함수였다

여러분들이 만드는 그런 큰 함수. 함수였어요

자 그러면 다음 시간에는

이제 컴포넌트에서 데이터를 관리하는 방법에 대해서

상태에 대해서 배워보도록 하겠습니다!